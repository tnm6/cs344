# Answers for Lab 3
## Nathan Meyer (tnm6)

### Exercise 3.1 (sudoku.py)
a.  Depth-first search does not solve any of the unsolved sudoku puzzles. It
  makes sense that it would fail since it would almost invariably time-out as
  it attempts to search through the entire tree of possible boards, or it would
  most likely get "stuck" choosing an incorrect board with no way to backtrack.
    AC3 could solve the first, easy puzzle quickly but not the others. Since it
  depends upon constraints, these likely perform well when the board is nearly
  finished. However, in the harder examples with fewer numbers filled in, the
  constraints alone cannot entirely narrow down the boards to one solution.
    Backtracking solved the easy puzzle eventually (43 seconds on my Mac), but
  would take an increasingly long time to solve the others. It could probably
  find answers to them, since it will not get stuck like depth-first, but would
  likely take an unreasonable amount of time to do so (exponentially so with
  the harder examples).
    Min-conflicts failed on the easy puzzle and took a long time to do so (96
  seconds). This is likely do to how, unlike an n-queens problem, there are
  considerably more variables to change the values for in order to reduce
  conflicts. The algorithm is likely to run out of allowed steps before finding
  a solution.
b.  Minimum-remaining-values and forward-checking together should produce the
  best result since forward-checking assists MRV in gathering its heuristic.
  This holds true. While forward-checking alone makes backtracking twice as
  fast as AC3 on the easy puzzle, forward-checking and MRV are 66% faster than
  that. More than that, forward-checking makes backtracking able to solve *all*
  of the puzzles, with MRV speeding up the solution further.

### Exercise 3.2 (queens.py)
a.  AC-3 fails for any n. This is perhaps due to the fact that, unlike in
  Sudoku, the valid values for each variable can be reintroduced. While the
  value for each place on the Sudoku board has only one value once each
  inconsistency is addressed, with n-queens, once-inconsistent values can
  become consistent, which might cause problems with AC-3. 
    n can technically be infinitely large for backtracking, but the time
  necessary increases at an alarming rate (16 takes 0.421 seconds while 24
  takes 12 seconds) because of the branching factor.
    n can get exceedingly large for min-conflicts. This makes sense since, in
  research on n-queens, it was found that min-conflicts can solve even a
  million-queens problem in an average of 50 steps.
b.  Minimum-remaining-values significantly speeds up backtracking, and forward-
  checking provides moderate speedup as well. Combined, they produce the
  fastest results. The significant speedup with MRV makes sense since the
  ability for backtracking to prune out large sets of invalid moves would lead
  to a significantly faster solving time with n-queens.

### Exercise 3.3 (compare and contrast)
a.  By the very nature of the name, constraint satisfaction problems can define
  constraints in order to prune possible solutions, while traditional search
  cannot. Traditional search requires a start state, a set of actions, and a
  goal state to test reach through those actions, while CSPs are built around 
  variables, domains (values for those variables), and constraints on tuples of
  those variables that must be satisfied. The only discernment made in
  traditional problems are the prerequisites needed to take an action, while
  CSPs can rule out entire subtrees based on constraints. This means that CSPs
  can require smaller search spaces than traditional search.
b.  The heuristics in traditional search usually involve the cost of actions
  taken while CSPs' heuristics can involve a greater variety depending on the
  algorithm. Because of the detail of constraints and domains, CSPs can define
  heuristics based upon both or either one, resulting in more complex
  heuristics than simply accounting for the cost of an action taken.
  